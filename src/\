use std::io;
use std::str;
use md4::{Md4, Digest};
use pbkdf2::{
    password_hash::{
        PasswordHash, PasswordHasher, SaltString
    },
    Pbkdf2
};

pub fn to_md4(pass: &str) -> String {
    let mut hasher = Md4::new();
    hasher.update(&pass);
    hex::encode(hasher.finalize())
}


pub fn to_pbkdf2(pass: &str) -> Result<String, pbkdf2::password_hash::Error> {
    let salt = SaltString::new(salt).unwrap();
    let mut sal_arr = [0u8; 64];
    let sb6 = salt.b64_decode(&mut sal_arr)?;
    dbg!(&sb6);
    dbg!(str::from_utf8(sb6));
    let sb6str = str::from_utf8(sb6).unwrap().to_string();
    //let hash = Pbkdf2.hash_password(pass.as_bytes(), &salt)?.to_string();
    //Ok(hash)
    Ok(sb6str)
}
